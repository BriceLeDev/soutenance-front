/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addType } from '../fn/type-panneau/add-type';
import { AddType$Params } from '../fn/type-panneau/add-type';
import { deleteTypePannau } from '../fn/type-panneau/delete-type-pannau';
import { DeleteTypePannau$Params } from '../fn/type-panneau/delete-type-pannau';
import { getAllType } from '../fn/type-panneau/get-all-type';
import { GetAllType$Params } from '../fn/type-panneau/get-all-type';
import { getType } from '../fn/type-panneau/get-type';
import { GetType$Params } from '../fn/type-panneau/get-type';
import { TypePanneau } from '../models/type-panneau';
import { TypePanResponse } from '../models/type-pan-response';
import { updatePanneauById } from '../fn/type-panneau/update-panneau-by-id';
import { UpdatePanneauById$Params } from '../fn/type-panneau/update-panneau-by-id';

@Injectable({ providedIn: 'root' })
export class TypePanneauService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePanneauById()` */
  static readonly UpdatePanneauByIdPath = '/type-panneau/update/{type-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePanneauById()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePanneauById$Response(params: UpdatePanneauById$Params, context?: HttpContext): Observable<StrictHttpResponse<TypePanResponse>> {
    return updatePanneauById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePanneauById$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePanneauById(params: UpdatePanneauById$Params, context?: HttpContext): Observable<TypePanResponse> {
    return this.updatePanneauById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TypePanResponse>): TypePanResponse => r.body)
    );
  }

  /** Path part for operation `addType()` */
  static readonly AddTypePath = '/type-panneau';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addType()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addType$Response(params: AddType$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addType$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addType(params: AddType$Params, context?: HttpContext): Observable<number> {
    return this.addType$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getType()` */
  static readonly GetTypePath = '/type-panneau/{type-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getType$Response(params: GetType$Params, context?: HttpContext): Observable<StrictHttpResponse<TypePanneau>> {
    return getType(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getType(params: GetType$Params, context?: HttpContext): Observable<TypePanneau> {
    return this.getType$Response(params, context).pipe(
      map((r: StrictHttpResponse<TypePanneau>): TypePanneau => r.body)
    );
  }

  /** Path part for operation `deleteTypePannau()` */
  static readonly DeleteTypePannauPath = '/type-panneau/{type-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTypePannau()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTypePannau$Response(params: DeleteTypePannau$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTypePannau(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTypePannau$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTypePannau(params: DeleteTypePannau$Params, context?: HttpContext): Observable<void> {
    return this.deleteTypePannau$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllType()` */
  static readonly GetAllTypePath = '/type-panneau/all-type-panneau';

  /**
   * Lister tous les type panneaux.
   *
   * Cette méthode retourne tous les types panneaux disponibles.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllType()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllType$Response(params?: GetAllType$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TypePanResponse>>> {
    return getAllType(this.http, this.rootUrl, params, context);
  }

  /**
   * Lister tous les type panneaux.
   *
   * Cette méthode retourne tous les types panneaux disponibles.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllType$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllType(params?: GetAllType$Params, context?: HttpContext): Observable<Array<TypePanResponse>> {
    return this.getAllType$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TypePanResponse>>): Array<TypePanResponse> => r.body)
    );
  }

}
