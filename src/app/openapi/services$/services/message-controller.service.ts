/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllMessage } from '../fn/message-controller/get-all-message';
import { GetAllMessage$Params } from '../fn/message-controller/get-all-message';
import { getMessageByUser } from '../fn/message-controller/get-message-by-user';
import { GetMessageByUser$Params } from '../fn/message-controller/get-message-by-user';
import { MessageResponse } from '../models/message-response';

@Injectable({ providedIn: 'root' })
export class MessageControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMessageByUser()` */
  static readonly GetMessageByUserPath = '/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMessageByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessageByUser$Response(params: GetMessageByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MessageResponse>>> {
    return getMessageByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMessageByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMessageByUser(params: GetMessageByUser$Params, context?: HttpContext): Observable<Array<MessageResponse>> {
    return this.getMessageByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body)
    );
  }

  /** Path part for operation `getAllMessage()` */
  static readonly GetAllMessagePath = '/message/all-message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessage$Response(params?: GetAllMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MessageResponse>>> {
    return getAllMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMessage(params?: GetAllMessage$Params, context?: HttpContext): Observable<Array<MessageResponse>> {
    return this.getAllMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MessageResponse>>): Array<MessageResponse> => r.body)
    );
  }

}
