/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAllImages } from '../fn/image/find-all-images';
import { FindAllImages$Params } from '../fn/image/find-all-images';
import { ImageResponse } from '../models/image-response';
import { saveImae } from '../fn/image/save-imae';
import { SaveImae$Params } from '../fn/image/save-imae';

@Injectable({ providedIn: 'root' })
export class ImageService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveImae()` */
  static readonly SaveImaePath = '/image/ajout-image/{abonnement-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveImae()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  saveImae$Response(params: SaveImae$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return saveImae(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveImae$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  saveImae(params: SaveImae$Params, context?: HttpContext): Observable<{
}> {
    return this.saveImae$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findAllImages()` */
  static readonly FindAllImagesPath = '/image';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllImages()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllImages$Response(params: FindAllImages$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ImageResponse>>> {
    return findAllImages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllImages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllImages(params: FindAllImages$Params, context?: HttpContext): Observable<Array<ImageResponse>> {
    return this.findAllImages$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ImageResponse>>): Array<ImageResponse> => r.body)
    );
  }

}
