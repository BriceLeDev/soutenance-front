/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deletePannau } from '../fn/panneau/delete-pannau';
import { DeletePannau$Params } from '../fn/panneau/delete-pannau';
import { getAllPanneaux } from '../fn/panneau/get-all-panneaux';
import { GetAllPanneaux$Params } from '../fn/panneau/get-all-panneaux';
import { getAllPanneauxByBoulevard } from '../fn/panneau/get-all-panneaux-by-boulevard';
import { GetAllPanneauxByBoulevard$Params } from '../fn/panneau/get-all-panneaux-by-boulevard';
import { getAllPanneauxLibre } from '../fn/panneau/get-all-panneaux-libre';
import { GetAllPanneauxLibre$Params } from '../fn/panneau/get-all-panneaux-libre';
import { getAllPanneauxLibreByBoulevard } from '../fn/panneau/get-all-panneaux-libre-by-boulevard';
import { GetAllPanneauxLibreByBoulevard$Params } from '../fn/panneau/get-all-panneaux-libre-by-boulevard';
import { getAllPanneauxOccuper } from '../fn/panneau/get-all-panneaux-occuper';
import { GetAllPanneauxOccuper$Params } from '../fn/panneau/get-all-panneaux-occuper';
import { getAllPanneauxOccuperByBoulevard } from '../fn/panneau/get-all-panneaux-occuper-by-boulevard';
import { GetAllPanneauxOccuperByBoulevard$Params } from '../fn/panneau/get-all-panneaux-occuper-by-boulevard';
import { PageResponsePanneauResponse } from '../models/page-response-panneau-response';
import { panneauFindById } from '../fn/panneau/panneau-find-by-id';
import { PanneauFindById$Params } from '../fn/panneau/panneau-find-by-id';
import { PanneauResponse } from '../models/panneau-response';
import { savePanneau } from '../fn/panneau/save-panneau';
import { SavePanneau$Params } from '../fn/panneau/save-panneau';
import { updatePanneauById1 } from '../fn/panneau/update-panneau-by-id-1';
import { UpdatePanneauById1$Params } from '../fn/panneau/update-panneau-by-id-1';


/**
 * Gestion des panneaux
 */
@Injectable({ providedIn: 'root' })
export class PanneauService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updatePanneauById1()` */
  static readonly UpdatePanneauById1Path = '/panneau/update/{panneau-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePanneauById1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePanneauById1$Response(params: UpdatePanneauById1$Params, context?: HttpContext): Observable<StrictHttpResponse<PanneauResponse>> {
    return updatePanneauById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePanneauById1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePanneauById1(params: UpdatePanneauById1$Params, context?: HttpContext): Observable<PanneauResponse> {
    return this.updatePanneauById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PanneauResponse>): PanneauResponse => r.body)
    );
  }

  /** Path part for operation `savePanneau()` */
  static readonly SavePanneauPath = '/panneau';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `savePanneau()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePanneau$Response(params: SavePanneau$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return savePanneau(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `savePanneau$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePanneau(params: SavePanneau$Params, context?: HttpContext): Observable<number> {
    return this.savePanneau$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `panneauFindById()` */
  static readonly PanneauFindByIdPath = '/panneau/{panneau-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `panneauFindById()` instead.
   *
   * This method doesn't expect any request body.
   */
  panneauFindById$Response(params?: PanneauFindById$Params, context?: HttpContext): Observable<StrictHttpResponse<PanneauResponse>> {
    return panneauFindById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `panneauFindById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  panneauFindById(params?: PanneauFindById$Params, context?: HttpContext): Observable<PanneauResponse> {
    return this.panneauFindById$Response(params, context).pipe(
      map((r: StrictHttpResponse<PanneauResponse>): PanneauResponse => r.body)
    );
  }

  /** Path part for operation `deletePannau()` */
  static readonly DeletePannauPath = '/panneau/{panneau-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePannau()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePannau$Response(params: DeletePannau$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePannau(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePannau$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePannau(params: DeletePannau$Params, context?: HttpContext): Observable<void> {
    return this.deletePannau$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllPanneaux()` */
  static readonly GetAllPanneauxPath = '/panneau/panneaux';

  /**
   * Lister tous les panneaux.
   *
   * Cette méthode retourne tous les panneaux disponibles.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPanneaux()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneaux$Response(params?: GetAllPanneaux$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePanneauResponse>> {
    return getAllPanneaux(this.http, this.rootUrl, params, context);
  }

  /**
   * Lister tous les panneaux.
   *
   * Cette méthode retourne tous les panneaux disponibles.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPanneaux$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneaux(params?: GetAllPanneaux$Params, context?: HttpContext): Observable<PageResponsePanneauResponse> {
    return this.getAllPanneaux$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePanneauResponse>): PageResponsePanneauResponse => r.body)
    );
  }

  /** Path part for operation `getAllPanneauxOccuper()` */
  static readonly GetAllPanneauxOccuperPath = '/panneau/panneaux-occuper';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPanneauxOccuper()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxOccuper$Response(params?: GetAllPanneauxOccuper$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePanneauResponse>> {
    return getAllPanneauxOccuper(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPanneauxOccuper$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxOccuper(params?: GetAllPanneauxOccuper$Params, context?: HttpContext): Observable<PageResponsePanneauResponse> {
    return this.getAllPanneauxOccuper$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePanneauResponse>): PageResponsePanneauResponse => r.body)
    );
  }

  /** Path part for operation `getAllPanneauxOccuperByBoulevard()` */
  static readonly GetAllPanneauxOccuperByBoulevardPath = '/panneau/panneaux-occuper/boulevard/{boulevard}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPanneauxOccuperByBoulevard()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxOccuperByBoulevard$Response(params: GetAllPanneauxOccuperByBoulevard$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePanneauResponse>> {
    return getAllPanneauxOccuperByBoulevard(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPanneauxOccuperByBoulevard$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxOccuperByBoulevard(params: GetAllPanneauxOccuperByBoulevard$Params, context?: HttpContext): Observable<PageResponsePanneauResponse> {
    return this.getAllPanneauxOccuperByBoulevard$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePanneauResponse>): PageResponsePanneauResponse => r.body)
    );
  }

  /** Path part for operation `getAllPanneauxLibre()` */
  static readonly GetAllPanneauxLibrePath = '/panneau/panneaux-libre';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPanneauxLibre()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxLibre$Response(params?: GetAllPanneauxLibre$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePanneauResponse>> {
    return getAllPanneauxLibre(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPanneauxLibre$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxLibre(params?: GetAllPanneauxLibre$Params, context?: HttpContext): Observable<PageResponsePanneauResponse> {
    return this.getAllPanneauxLibre$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePanneauResponse>): PageResponsePanneauResponse => r.body)
    );
  }

  /** Path part for operation `getAllPanneauxLibreByBoulevard()` */
  static readonly GetAllPanneauxLibreByBoulevardPath = '/panneau/panneaux-libre/boulevard/{boulevard}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPanneauxLibreByBoulevard()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxLibreByBoulevard$Response(params: GetAllPanneauxLibreByBoulevard$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePanneauResponse>> {
    return getAllPanneauxLibreByBoulevard(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPanneauxLibreByBoulevard$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxLibreByBoulevard(params: GetAllPanneauxLibreByBoulevard$Params, context?: HttpContext): Observable<PageResponsePanneauResponse> {
    return this.getAllPanneauxLibreByBoulevard$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePanneauResponse>): PageResponsePanneauResponse => r.body)
    );
  }

  /** Path part for operation `getAllPanneauxByBoulevard()` */
  static readonly GetAllPanneauxByBoulevardPath = '/panneau/boulevard/{boulevard}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPanneauxByBoulevard()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxByBoulevard$Response(params: GetAllPanneauxByBoulevard$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePanneauResponse>> {
    return getAllPanneauxByBoulevard(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPanneauxByBoulevard$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPanneauxByBoulevard(params: GetAllPanneauxByBoulevard$Params, context?: HttpContext): Observable<PageResponsePanneauResponse> {
    return this.getAllPanneauxByBoulevard$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePanneauResponse>): PageResponsePanneauResponse => r.body)
    );
  }

}
