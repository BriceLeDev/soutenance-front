/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addRole } from '../fn/role/add-role';
import { AddRole$Params } from '../fn/role/add-role';
import { deleteRole } from '../fn/role/delete-role';
import { DeleteRole$Params } from '../fn/role/delete-role';
import { getRole } from '../fn/role/get-role';
import { GetRole$Params } from '../fn/role/get-role';
import { RoleRespons } from '../models/role-respons';
import { updateRole } from '../fn/role/update-role';
import { UpdateRole$Params } from '../fn/role/update-role';

@Injectable({ providedIn: 'root' })
export class RoleService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addRole()` */
  static readonly AddRolePath = '/role';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRole()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRole$Response(params: AddRole$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRole$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRole(params: AddRole$Params, context?: HttpContext): Observable<number> {
    return this.addRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateRole()` */
  static readonly UpdateRolePath = '/role/update-role/{role-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRole$Response(params: UpdateRole$Params, context?: HttpContext): Observable<StrictHttpResponse<RoleRespons>> {
    return updateRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRole(params: UpdateRole$Params, context?: HttpContext): Observable<RoleRespons> {
    return this.updateRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoleRespons>): RoleRespons => r.body)
    );
  }

  /** Path part for operation `getRole()` */
  static readonly GetRolePath = '/role/add-role/{role-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRole$Response(params: GetRole$Params, context?: HttpContext): Observable<StrictHttpResponse<RoleRespons>> {
    return getRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRole(params: GetRole$Params, context?: HttpContext): Observable<RoleRespons> {
    return this.getRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<RoleRespons>): RoleRespons => r.body)
    );
  }

  /** Path part for operation `deleteRole()` */
  static readonly DeleteRolePath = '/role/add-role/{role-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRole$Response(params: DeleteRole$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRole(params: DeleteRole$Params, context?: HttpContext): Observable<void> {
    return this.deleteRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
